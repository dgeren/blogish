<%
// * BUILD THE ARCHIVE HTML FOR THE SIDEBAR
buildArchive = archive => {

  if(archive.error) {
    return `
    <div class="archive">\n
      <h3>ARCHIVE</h3>\n
      <p>${archive.message}</p>\n
    </div>\n`;
  }
  
  let output = `<div class="archive">\n<h3>ARCHIVE</h3>\n`, currentYear = 0, currentMonth = 0, currentDay = 0;
  let first = true;
  const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

  for(item of archive){
    
    const d = item.pubDate;
    const year = d.getUTCFullYear();
    const month = d.getUTCMonth();
    const day = d.getUTCDate();

    if(!first){
      if(currentYear !== year) {
        output += `</details>\n</details>\n`;
      } else if(currentMonth !== month) {
        output += `</details>\n`;
      }
    }

    if(currentYear !== year) {
      currentYear = year, currentMonth = month;
      output += `<details class="archive--year">\n<summary>${year}</summary>\n`;
      output += `<details class="archive--month">\n<summary>${months[month]}</summary>\n`;
    } else if(currentMonth !== month) {
      currentMonth = month;
      output += `<details class="archive--month">\n<summary>${months[month]}</summary>\n`;
    }
    currentDay = day;
    output += `
      <div class="archive--entry">
        <div class="archive--day">${day}</div>
        <div class="archive--title-box">
          <a class="archive--title" href="/reader/slug/${item.slug}/id/${item._id}">${item.title}</a>
        </div>
      </div>\n`;

    first = false;
  }
  output += `</details>\n</details>`;

  output += `</div>\n`;
  return output.trim();
}

// * CONVERT TOPICS ARRAY INTO A LIST OF LINKS FOR CARDS AND READERS
buildTopics = topics => { // expects array of objects: {id, array of topics}


  if(topics.error){
    return `
      <div class="categories">\n
        <h3>TOPICS</h3>\n
          <p>${topics.message}</p>\n
      </div>\n
    `;
  }

  const data = {};

  topics.forEach(item => {
    item.tags.forEach(topic => {
      if(topic != '' && topic in data) data[topic] += 1;
      else data[topic] = 1;
    });
  });

  let html = `<div class="categories">\n<h3>TOPICS</h3>\n<ul>\n`;
  Object.keys(data).forEach(key => html += `
    <li>
      <div class="categories--key"><a href="/listByTags/${key}">${ key }</a></div>
      <div class="categories--count">${ data[key] }</div>
    </li>\n`);

  return html += `</ul>\n</div>`;
}

// * CONVERT TOPICS ARRAY TO HTML
prepTopics = topics => {
  // expects an array of strings
  return topics ? topics.map(topic => `<a class="label smaller" href="/listByTags/${topic}">${topic}</a>`).join(" ") : "";

}

prepDates = pubDate => {
  if(pubDate === null || pubDate === "" ) return { dateDisplay: "Unpublished", dateString: "", timeString: ""};

  // expects date BSON from entry.pubDate

  const dateObj = new Date(pubDate);
  const fullMonth = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

  const dateString = dateObj.toISOString().substring(0, 10); //  -> "yyyy-mm-dd"
  const timeString = dateObj.toISOString().substring(11, 16); // -> "hh:mm"
  const dateDisplay = `${fullMonth[dateObj.getMonth()]} ${dateObj.getDate()}, ${dateObj.getFullYear()}`;
  
  // dateString & timeString used in editor.ejs to fill publish date and time fields
  return { dateDisplay, dateString, timeString };

}

buildContent = entry => {
  const { title, slug, HTML, preview, _id, pubDate = null, tags = null } = entry;js
  const dateDisplay = pubDate === null ? "" : prepDates(entry.pubDate).dateDisplay;
  const topicsDisplay = tags ? "" : prepTopics(entry.tags);

  let html = `  <div class="date-display small">${dateDisplay === "undefined NaN, NaN" ? "Unpublished" : dateDisplay}`;
  if(user && !preview) html += `<a href="/editor/slug/${slug}" class="button">[ &#9998; ] </a>`;
  html += `</div>
  <div class="title-box">
    <h2>${title}</h2>
  </div>

  <section class="reader--entry">
    <div>${HTML}/div>
    <p>${topicsDisplay}</p>
  </section>`
}


testing = () => {
  console.log("testing working"); // ðŸ”´
}

%>